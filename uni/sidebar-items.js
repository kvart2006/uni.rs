initSidebarItems({"macro":[["format!","Use the syntax described in `std::fmt` to create a value of type `String`. See `std::fmt` for more information.Examples"],["print!","Print on the standard output"],["println!","Print on the standard output with a new line"],["vec!","Creates a `Vec` containing the arguments.`vec!` allows `Vec`s to be defined with the same syntax as array expressions. There are two forms of this macro:Create a `Vec` containing a given list of elements: Create a `Vec` from a given element and size: Note that unlike array expressions this syntax supports all elements which implement `Clone` and the number of elements doesn't have to be a constant.This will use `clone()` to duplicate an expression, so one should be careful using this with types having a nonstandard `Clone` implementation. For example, `vec![Rc::new(1); 5]` will create a vector of five references to the same boxed integer value, not five references pointing to independently boxed integers."],["wait_event!","Wait for an event to occurThis macro allows a thread to wait for a condition to become true. If the condition is false, the thread will block on the `queue` given as parameter. This macro *MUST* be called with local irqs enabled.Note that this macro does not signify exclusivity. In fact multiple concurrent threads might go through. In that case external atomic (or locked) test on the condition might be necessary."]],"mod":[["cell","Shareable mutable containers."],["ffi","Utilities related to FFI bindings."],["hal","Hardware Abstraction LayerThe goal of this module is to abstract the machine/architecture so that the API is the same no matter the underlying hardware.For now only Xen (x86/x86_64) is supported. A goal for the future would be to be compatible with the virtio standard as well and support Xen arm"],["io","Definition of types, traits, ... for I/O functionality"],["net","Networking primitives for Uni.rs"],["num","Numeric traits and functions for the built-in numeric types."],["sync","Synchronisation primitives for Uni.rs"],["thread","Scheduling primitives for Uni.rs."]]});